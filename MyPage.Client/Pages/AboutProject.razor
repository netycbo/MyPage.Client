@page "/aboutProject"
@using System.Text.Json
@inject HttpClient Http
@layout MainLayout

<div class="containerAbout main-text-container">
    <div class="main-text">
        <h2>Om Prosjektet</h2>
        <p>
            Moderne nettapplikasjon: Blazor WASM og Azure Functions
            Dette prosjektet er en moderne nettapplikasjon som benytter Blazor WebAssembly (WASM) Standalone for et interaktivt brukergrensesnitt skrevet utelukkende i C#. Backend-laget er basert på Azure Functions, som gir skalerbarhet og høy ytelse takket være serverløs arkitektur.
            Brukergrensesnittet er utviklet med HTML, CSS og Bootstrap, og sikrer responsivt design og et konsekvent visuelt uttrykk. Applikasjonen er hostet på Azure Static Web Apps, som tilbyr automatisk distribusjon (CI/CD) og global innholdslevering.
            Domenet og SMTP-serveren administreres av eksterne leverandører, noe som gir fleksibilitet og mulighet til å bruke spesialiserte tjenester for profesjonell e-postkommunikasjon.
            Prosjektet kombinerer kraften i .NET på klientsiden med fleksibiliteten til en serverløs backend og Azures infrastruktur – og skaper en kostnadseffektiv og vedlikeholdsvennlig løsning, ideell for dynamiske webapplikasjoner.
        </p>
        <p>Nedenfor finner du noen sanntidsdata hentet fra Azure Application Insights.</p>
    </div>
</div>

<div class="containerAbout grid-container">
    <div class="grid-item">
        <h1>Total page visits from deploy (02.07.2025)</h1>
        @if (IsLoadingTotalVisits)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="loaderData"></span>
            </div>
        }
        else
        {
            <p>@GetTotalVisits</p>
        }
    </div>
    <div class="grid-item">
        <h1>Emails send with (hoppefully) job offer</h1>
        @if (IsLoadingTotalEmails)
        {
            <div class="spinner-border text-success" role="status">
                <span class="loaderData"></span>
            </div>
        }
        else
        {
            <p>@GetTotalEmailsSent</p>
        }
    </div>
    <div class="grid-item">
        <h1>Visits in this week vs last week</h1>
        @if (IsLoadingWeekToWeek)
        {
            <div class="spinner-border text-warning" role="status">
                <span class="loaderData"></span>
            </div>
        }
        else
        {
            <p>@WeekToWeekVisits</p>
        }
    </div>
    <div class="grid-item">
        <h1>Average visit duration in minutes</h1>
        @if (IsLoadingAvgDuration)
        {
            <div class="spinner-border text-info" role="status">
                <span class="loaderData"></span>
            </div>
        }
        else
        {
            <p>@AvarageVisitDuration</p>
        }
    </div>
</div>
<div class=" row">
    <div class=" text-center">
        Er du fornøyd med det du ser? Tror du at jeg kan være til nytte i din bedrift? Send meg gjerne en melding. <a href="/#contact">Kontakt</a>
    </div>
</div>


@code {
    private int GetTotalVisits { get; set; }
    private int GetTotalEmailsSent { get; set; }
    private int WeekToWeekVisits { get; set; }
    private int AvarageVisitDuration { get; set; }

    private bool IsLoadingAvgDuration { get; set; }
    private bool IsLoadingWeekToWeek { get; set; }
    private bool IsLoadingTotalEmails { get; set; }
    private bool IsLoadingTotalVisits { get; set; }


    protected override async Task OnInitializedAsync()
    {
       await Task.WhenAll(
       LoadTotalVisits(),
       LoadTotalEmailsSent(),
       LoadWeekToWeekVisits(),
       LoadAvarageVisitDuration()
        );
    }

    private async Task LoadTotalVisits()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Dictionary<string, int>>("/api/GetTotalVisit");
            GetTotalVisits = result?.GetValueOrDefault("totalVisits") ?? 666;
        }
        finally
        {
            IsLoadingTotalVisits = false;
        }
    }

    private async Task LoadTotalEmailsSent()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Dictionary<string, int>>("/api/GetTotalEmailsSent");
            GetTotalEmailsSent = result?.GetValueOrDefault("totalEmailsSent") ?? 69;
        }
        finally
        {
            IsLoadingTotalEmails = false;
        }
    }

    private async Task LoadWeekToWeekVisits()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Dictionary<string, int>>("/api/GetWeekToWeekVisits");
            WeekToWeekVisits = result?.GetValueOrDefault("weekToWeekVisits") ?? 0;
        }
        finally
        {
            IsLoadingWeekToWeek = false;
        }
    }

    private async Task LoadAvarageVisitDuration()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Dictionary<string, int>>("/api/GetAvarageVisitDuration");
            AvarageVisitDuration = result?.GetValueOrDefault("avarageVisitDuration") ?? 0;
        }
        finally
        {
            IsLoadingAvgDuration = false;
        }
    }
}